# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore Backend/backedn.sln

    - name: Build
      run: dotnet build Backend/backedn.sln --no-restore

    - name: Test
      run: dotnet test Backend/backedn.sln --no-build --verbosity normal

    - name: Publish Backend
      run: |
        dotnet publish Backend/WebApi/WebApi.csproj -c Release -r linux-x64 --self-contained false -o publish/backend

    - name: Upload Backend Artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-app
        path: publish/backend

  frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: 22

    - name: Install Dependencies
      run: npm install
      working-directory: ./Frontend/angular_ui # adjust this if your Angular app is in a different folder

    - name: Build Angular App
      run: npm run build -- --configuration production
      working-directory: ./Frontend/angular_ui

    - name: Upload Frontend Artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-app
        path: ./Frontend/angular_ui/dist # adjust if your output directory is different

  deploy:
    runs-on: ubuntu-latest
    needs: [ backend, frontend ]
    steps:
    - name: Download Backend Artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-app
        path: ./backend-app

    - name: Download Frontend Artifact
      uses: actions/download-artifact@v4
      with:
        name: frontend-app
        path: ./frontend-app

    - name: Set Environment Variables Based on Branch
      run: |
        echo "HOST=${{ secrets.DEPLOY_HOST }}" >> $GITHUB_ENV
        echo "USER=${{ secrets.DEPLOY_USER }}" >> $GITHUB_ENV
        echo "KEY=${{ secrets.DEPLOY_SSH_KEY }}" >> $GITHUB_ENV

        if [[ "${GITHUB_REF##*/}" == "main" ]]; then
          echo "ENV_PATH=prod" >> $GITHUB_ENV
        elif [[ "${GITHUB_REF##*/}" == "staging" ]]; then
          echo "ENV_PATH=stage" >> $GITHUB_ENV
        elif [[ "${GITHUB_REF##*/}" == "develop" ]]; then
          echo "ENV_PATH=dev" >> $GITHUB_ENV
        else
          echo "Unsupported branch: $GITHUB_REF"
          exit 1
        fi

    - name: Add Server to known_hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ env.HOST }} >> ~/.ssh/known_hosts

    - name: Deploy Backend
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ env.HOST }}
        username: ${{ env.USER }}
        key: ${{ env.KEY }}
        source: "./backend-app/*"
        target: "/var/www/cms/personal/api"

    - name: Deploy Frontend
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ env.HOST }}
        username: ${{ env.USER }}
        key: ${{ env.KEY }}
        source: "./frontend-app/*"
        target: "/var/www/cms/personal/frontend"
